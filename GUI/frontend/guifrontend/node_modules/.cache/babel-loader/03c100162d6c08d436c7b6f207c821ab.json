{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/akshat/Anveshak/touchpad/frontend/guifrontend/src/Nodes.js\";\n\nasync function addNode(name, scommand, kcommand) {\n  let promise = new Promise(function (resolve, reject) {\n    fetch(\"http://localhost:5000/api/addnode?nodename=\" + name + \"&scommand=\" + scommand + \"&kcommand=\" + kcommand, res => {\n      if (res.ok) {\n        resolve(true);\n      } else {\n        alert(\"Error in adding node!\");\n        resolve(false);\n      }\n    });\n  });\n  let result = await promise;\n  return result;\n}\n\nasync function deleteNode(name) {\n  let promise = new Promise(function (resolve, reject) {\n    fetch(\"http://localhost:5000/api/deletenode?nodename=\" + name, res => {\n      if (res.ok) {\n        resolve(true);\n      } else {\n        alert(\"Error in deleting node!\");\n        resolve(false);\n      }\n    });\n  });\n  let result = await promise;\n  return result;\n}\n\nasync function startNode() {\n  let promise = new Promise(function (resolve, reject) {\n    fetch(\"http://localhost:5000/api/startnode?nodename=\" + name, res => {\n      if (res.ok) {\n        resolve(true);\n      } else {\n        alert(\"Error in starting node!\");\n        resolve(false);\n      }\n    });\n  });\n  let result = await promise;\n  return result;\n}\n\nasync function fetchNodes() {\n  let promise = new Promise(function (resolve, reject) {\n    fetch(\"http://localhost:5000/api/nodes\", res => {\n      if (res.ok) {\n        resolve(res);\n      } else {\n        alert(\"Error in adding node!\");\n        resolve([]);\n      }\n    });\n  });\n  let result = await promise;\n  return result;\n}\n\nfunction Nodes() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\" Nodes\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(NodeForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 11\n  }, this);\n}\n\n_c = Nodes;\n\nfunction NodeForm() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Add a Node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"NodeName\",\n      placeholder: \"Name of the node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 74\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"NodeStartCommand\",\n      placeholder: \"Command to start the node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 91\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"NodeKillCommand\",\n      placeholder: \"Command to kill the node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 89\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 10\n  }, this);\n}\n\n_c2 = NodeForm;\nexport default Nodes;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Nodes\");\n$RefreshReg$(_c2, \"NodeForm\");","map":{"version":3,"sources":["/home/akshat/Anveshak/touchpad/frontend/guifrontend/src/Nodes.js"],"names":["addNode","name","scommand","kcommand","promise","Promise","resolve","reject","fetch","res","ok","alert","result","deleteNode","startNode","fetchNodes","Nodes","NodeForm"],"mappings":"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","sourcesContent":["\n\nasync function addNode(name,scommand,kcommand)\n{\n  let promise = new Promise(function(resolve, reject) {\n    \n  \n    fetch(\"http://localhost:5000/api/addnode?nodename=\"+name+\"&scommand=\"+scommand+\"&kcommand=\"+kcommand,(res)=>{\n\n        if(res.ok)\n        {\n           resolve(true) \n        }\n        else{\n         \n          alert(\"Error in adding node!\")\n          resolve(false) \n        }\n\n\n    })\n\n  });\n\n  let result = await promise\n  return result\n\n\n\n}\nasync function deleteNode(name)\n{\n\n  let promise = new Promise(function(resolve, reject) {\n    \n  \n    fetch(\"http://localhost:5000/api/deletenode?nodename=\"+name,(res)=>{\n\n        if(res.ok)\n        {\n           resolve(true) \n        }\n        else{\n         \n          alert(\"Error in deleting node!\")\n          resolve(false) \n        }\n\n\n    })\n\n  });\n\n  let  result = await promise\n  return result\n\n\n}\nasync function startNode()\n{\n  let promise = new Promise(function(resolve, reject) {\n    \n  \n    fetch(\"http://localhost:5000/api/startnode?nodename=\"+name,(res)=>{\n\n        if(res.ok)\n        {\n            resolve(true) \n        }\n        else{\n         \n          alert(\"Error in starting node!\")\n          resolve(false) \n        }\n\n\n    })\n\n  });\n\n  let result = await promise\n  return result\n\n\n}\nasync function fetchNodes()\n{\n  let promise = new Promise(function(resolve, reject) {\n    \n  \n    fetch(\"http://localhost:5000/api/nodes\",(res)=>{\n\n        if(res.ok)\n        {\n            resolve(res) \n        }\n        else{\n         \n          alert(\"Error in adding node!\")\n          resolve([]) \n        }\n\n\n    })\n\n  });\n\n  let result = await promise\n  return result\n\n}\n\n\n\nfunction Nodes()\n{\n  return (<div> Nodes\n\n    <br />\n    <NodeForm />\n\n\n  </div>);\n}\nfunction NodeForm()\n{\n  return(<div>\n\n\n      <h3>Add a Node</h3>\n\n\n      <input type=\"text\" id=\"NodeName\" placeholder=\"Name of the node\" /> <br />\n      <input type=\"text\" id=\"NodeStartCommand\" placeholder=\"Command to start the node\" /> <br />\n      <input type=\"text\" id=\"NodeKillCommand\" placeholder=\"Command to kill the node\" /> <br />\n      \n      \n\n\n\n  </div>)\n}\nexport default Nodes;"]},"metadata":{},"sourceType":"module"}