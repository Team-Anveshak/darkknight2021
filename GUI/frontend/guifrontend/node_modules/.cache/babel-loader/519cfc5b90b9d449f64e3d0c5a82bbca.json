{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/akshat/Anveshak/touchpad/frontend/guifrontend/src/Nodes.js\";\n\nasync function addNode(name, scommand, kcommand) {\n  let promise = new Promise(function (resolve, reject) {\n    fetch(\"http://localhost:5000/api/addnode?nodename=\" + name + \"&scommand=\" + scommand + \"&kcommand=\" + kcommand, res => {\n      if (res.ok) {\n        resolve(true);\n      } else {\n        alert(\"Error in adding node!\");\n        resolve(false);\n      }\n    });\n  });\n  result = await promise;\n  return result;\n}\n\nasync function deleteNode(name) {\n  let promise = new Promise(function (resolve, reject) {\n    fetch(\"http://localhost:5000/api/deletenode?nodename=\" + name, res => {\n      if (res.ok) {\n        resolve(true);\n      } else {\n        alert(\"Error in deleting node!\");\n        resolve(false);\n      }\n    });\n  });\n  result = await promise;\n  return result;\n}\n\nasync function startNode() {\n  let promise = new Promise(function (resolve, reject) {\n    fetch(\"http://localhost:5000/api/startnode?nodename=\" + name, res => {\n      if (res.ok) {\n        resolve(true);\n      } else {\n        alert(\"Error in starting node!\");\n        resolve(false);\n      }\n    });\n  });\n  result = await promise;\n  return result;\n}\n\nasync function fetchNodes() {\n  let promise = new Promise(function (resolve, reject) {\n    fetch(\"http://localhost:5000/api/nodes\", res => {\n      if (res.ok) {\n        resolve(res);\n      } else {\n        alert(\"Error in adding node!\");\n        resolve([]);\n      }\n    });\n  });\n  result = await promise;\n  return result;\n}\n\nfunction Nodes() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \" Nodes\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 11\n  }, this);\n}\n\n_c = Nodes;\nexport default Nodes;\n\nvar _c;\n\n$RefreshReg$(_c, \"Nodes\");","map":{"version":3,"sources":["/home/akshat/Anveshak/touchpad/frontend/guifrontend/src/Nodes.js"],"names":["addNode","name","scommand","kcommand","promise","Promise","resolve","reject","fetch","res","ok","alert","result","deleteNode","startNode","fetchNodes","Nodes"],"mappings":";;;AAEA,eAAeA,OAAf,CAAuBC,IAAvB,EAA4BC,QAA5B,EAAqCC,QAArC,EACA;AACE,MAAIC,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAGlDC,IAAAA,KAAK,CAAC,gDAA8CP,IAA9C,GAAmD,YAAnD,GAAgEC,QAAhE,GAAyE,YAAzE,GAAsFC,QAAvF,EAAiGM,GAAD,IAAO;AAExG,UAAGA,GAAG,CAACC,EAAP,EACA;AACGJ,QAAAA,OAAO,CAAC,IAAD,CAAP;AACF,OAHD,MAII;AAEFK,QAAAA,KAAK,CAAC,uBAAD,CAAL;AACAL,QAAAA,OAAO,CAAC,KAAD,CAAP;AACD;AAGJ,KAbI,CAAL;AAeD,GAlBa,CAAd;AAoBAM,EAAAA,MAAM,GAAG,MAAMR,OAAf;AACA,SAAOQ,MAAP;AAID;;AACD,eAAeC,UAAf,CAA0BZ,IAA1B,EACA;AAEE,MAAIG,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAGlDC,IAAAA,KAAK,CAAC,mDAAiDP,IAAlD,EAAwDQ,GAAD,IAAO;AAE/D,UAAGA,GAAG,CAACC,EAAP,EACA;AACGJ,QAAAA,OAAO,CAAC,IAAD,CAAP;AACF,OAHD,MAII;AAEFK,QAAAA,KAAK,CAAC,yBAAD,CAAL;AACAL,QAAAA,OAAO,CAAC,KAAD,CAAP;AACD;AAGJ,KAbI,CAAL;AAeD,GAlBa,CAAd;AAoBAM,EAAAA,MAAM,GAAG,MAAMR,OAAf;AACA,SAAOQ,MAAP;AAGD;;AACD,eAAeE,SAAf,GACA;AACE,MAAIV,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAGlDC,IAAAA,KAAK,CAAC,kDAAgDP,IAAjD,EAAuDQ,GAAD,IAAO;AAE9D,UAAGA,GAAG,CAACC,EAAP,EACA;AACIJ,QAAAA,OAAO,CAAC,IAAD,CAAP;AACH,OAHD,MAII;AAEFK,QAAAA,KAAK,CAAC,yBAAD,CAAL;AACAL,QAAAA,OAAO,CAAC,KAAD,CAAP;AACD;AAGJ,KAbI,CAAL;AAeD,GAlBa,CAAd;AAoBAM,EAAAA,MAAM,GAAG,MAAMR,OAAf;AACA,SAAOQ,MAAP;AAGD;;AACD,eAAeG,UAAf,GACA;AACE,MAAIX,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAGlDC,IAAAA,KAAK,CAAC,iCAAD,EAAoCC,GAAD,IAAO;AAE3C,UAAGA,GAAG,CAACC,EAAP,EACA;AACIJ,QAAAA,OAAO,CAACG,GAAD,CAAP;AACH,OAHD,MAII;AAEFE,QAAAA,KAAK,CAAC,uBAAD,CAAL;AACAL,QAAAA,OAAO,CAAC,EAAD,CAAP;AACD;AAGJ,KAbI,CAAL;AAeD,GAlBa,CAAd;AAoBAM,EAAAA,MAAM,GAAG,MAAMR,OAAf;AACA,SAAOQ,MAAP;AAED;;AAID,SAASI,KAAT,GACA;AACE,sBAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAR;AACD;;KAHQA,K;AAIT,eAAeA,KAAf","sourcesContent":["\n\nasync function addNode(name,scommand,kcommand)\n{\n  let promise = new Promise(function(resolve, reject) {\n    \n  \n    fetch(\"http://localhost:5000/api/addnode?nodename=\"+name+\"&scommand=\"+scommand+\"&kcommand=\"+kcommand,(res)=>{\n\n        if(res.ok)\n        {\n           resolve(true) \n        }\n        else{\n         \n          alert(\"Error in adding node!\")\n          resolve(false) \n        }\n\n\n    })\n\n  });\n\n  result = await promise\n  return result\n\n\n\n}\nasync function deleteNode(name)\n{\n\n  let promise = new Promise(function(resolve, reject) {\n    \n  \n    fetch(\"http://localhost:5000/api/deletenode?nodename=\"+name,(res)=>{\n\n        if(res.ok)\n        {\n           resolve(true) \n        }\n        else{\n         \n          alert(\"Error in deleting node!\")\n          resolve(false) \n        }\n\n\n    })\n\n  });\n\n  result = await promise\n  return result\n\n\n}\nasync function startNode()\n{\n  let promise = new Promise(function(resolve, reject) {\n    \n  \n    fetch(\"http://localhost:5000/api/startnode?nodename=\"+name,(res)=>{\n\n        if(res.ok)\n        {\n            resolve(true) \n        }\n        else{\n         \n          alert(\"Error in starting node!\")\n          resolve(false) \n        }\n\n\n    })\n\n  });\n\n  result = await promise\n  return result\n\n\n}\nasync function fetchNodes()\n{\n  let promise = new Promise(function(resolve, reject) {\n    \n  \n    fetch(\"http://localhost:5000/api/nodes\",(res)=>{\n\n        if(res.ok)\n        {\n            resolve(res) \n        }\n        else{\n         \n          alert(\"Error in adding node!\")\n          resolve([]) \n        }\n\n\n    })\n\n  });\n\n  result = await promise\n  return result\n\n}\n\n\n\nfunction Nodes()\n{\n  return (<div> Nodes</div>);\n}\nexport default Nodes;"]},"metadata":{},"sourceType":"module"}